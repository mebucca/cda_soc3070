xaringan:::inf_mr()
knitr::opts_chunk$set(eval = T, echo = T)
library("tidyverse")
url <- "https://raw.githubusercontent.com/mebucca/dar_soc4001/master/data/sample_casen2017.csv"
casen2017
casen2017 <- read.csv(url)
casen2017 <- read.csv(url) %>% as_tibble()
casen2017
library("carData")
data("Chile")
datos_chile <- Chile
datos_chile <- datos_chile %>% mutate(vote = case_when(vote=="Y" ~ 0, vote=="N" ~ 1))
datos_chile %>% glimpse()
ctable <- datos_chile %>% with(table(income,vote))
print(ctable)
library("carData")
data("Chile")
datos_chile <- Chile
datos_chile %>% glimpse()
ctable <- datos_chile %>% with(table(income,vote))
print(ctable)
library("carData")
data("Chile")
datos_chile <- Chile
datos_chile <- datos_chile %>% filter(vote == "Y" | vote=="N")
datos_chile %>% glimpse()
ctable <- datos_chile %>% with(table(income,vote))
print(ctable)
library("carData")
data("Chile")
datos_chile <- Chile
datos_chile <- datos_chile %>% filter(vote == "Y" | vote=="N") %>% mutate(vote = factor(vote))
datos_chile %>% glimpse()
ctable <- datos_chile %>% with(table(income,vote))
print(ctable)
xaringan:::inf_mr()
data_grid
ctable
joint_dis
ctbale(joint_dis)
ctale(joint_dis)
cont.table(joint_dis)
data_grid
pivot_longer(joint_dis, cols = c(N, Y), names_to = "vote_status", values_to = "percentage")
library("tidyverse")
pivot_longer(joint_dis, cols = c(N, Y), names_to = "vote_status", values_to = "percentage")
joint_dis
joint_dis %>% as_tibble()
joint_dis %>% as_tibble()
data_grid <- joint_dis %>% as_tibble() %>% rename(p=n)
data_grid
ggplot(data_grid, aes(x = income, y = vote)) +
geom_tile(aes(fill = p), color = "black", width = 1, height = 1) +
scale_fill_gradient(low = "#FDB913", high = "#C8102E") +
theme_minimal() +
labs(
title = "",
x = "",
y = "",
fill = "Density"
) +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
legend.position = "none"
)
p_main <- ggplot(data_grid, aes(x = income, y = vote)) +
geom_tile(aes(fill = p), color = "black", width = 1, height = 1) +
scale_fill_gradient(low = "#FDB913", high = "#C8102E") +
theme_minimal() +
labs(
title = "",
x = "",
y = "",
fill = "Density"
) +
theme(
axis.ticks = element_blank(),
legend.position = "none"
)
p_main
# Create the main heatmap
p_main <- ggplot(data_grid, aes(x = income, y = vote)) +
geom_tile(aes(fill = p), color = "black", width = 1, height = 1) +
scale_fill_gradient(low = "#FDB913", high = "#C8102E") +
theme_minimal() +
labs(
title = "",
x = "",
y = "",
fill = "Density"
) +
theme(
axis.ticks = element_blank(),
legend.position = "none"
)
# Create the marginal density plot for X and rotate it by 90 degrees
p_x <- ggplot(data_grid %>% group_by(income) %>% summarise(p = sum(p)), aes(x = income, y = p)) +
geom_col(fill = "#FDB913") +
coord_flip() +
theme_void()  # Remove grid and axis labels
# Create the marginal density plot for Y
p_y <- ggplot(data_grid %>% group_by(vote) %>% summarise(p = sum(p)), aes(x = vote, y = p)) +
geom_col(fill = "#FDB913") +
theme_void()  # Remove grid and axis labels
# Combine all plots
grid.arrange(p_y, NULL, p_main, p_x, ncol = 2, nrow = 2, widths = c(4, 1), heights = c(1, 4))
# Create the marginal density plot for X and rotate it by 90 degrees
p_x <- ggplot(data_grid %>% group_by(vote) %>% summarise(p = sum(p)), aes(x = vote, y = p)) +
geom_col(fill = "#FDB913") +
coord_flip() +
theme_void()  # Remove grid and axis labels
# Create the marginal density plot for Y
p_y <- ggplot(data_grid %>% group_by(income) %>% summarise(p = sum(p)), aes(x = income, y = p)) +
geom_col(fill = "#FDB913") +
theme_void()  # Remove grid and axis labels
# Combine all plots
grid.arrange(p_y, NULL, p_main, p_x, ncol = 2, nrow = 2, widths = c(4, 1), heights = c(1, 4))
---
## Distribuciones condicionales
xaringan:::inf_mr()
wnames(joint_income_vote_indep)
rownames(joint_income_vote_indep)
joint_income_vote_indep
rownames(ctable)
(((ctable - ctable_independence)^(2))/ctable_independence) %>% print()
our_chi2 <- (((ctable - ctable_independence)^(2))/ctable_independence) %>% sum(); print(our_chi2)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
# Load the plotly library
library(plotly)
# Assuming data_grid is your data frame with x, y, and z values
# Create a 3D scatter plot
plot <- plot_ly(data_grid, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers',
marker = list(size = 5, color = z, colorscale = 'Viridis'))
data_grid
library(plotly)
plot_ly(data_grid, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers',
marker = list(size = 5, color = z, colorscale = 'Viridis'))
data_grid
plot_ly(data_grid, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers',
marker = list(size = 5, color = z, colorscale = 'Viridis'))
# Assuming data_grid is your data frame with x, y, and z columns
plot <- plot_ly(data_grid, x = ~data_grid$x, y = ~data_grid$y, z = ~data_grid$z,
type = 'scatter3d', mode = 'markers',
marker = list(size = 5, color = ~data_grid$z, colorscale = 'Viridis'))
plot
# Initialize the 3D plot
plot <- plot_ly(data_grid, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers')
# Add bars (lines) for each data point
for(i in 1:nrow(data_grid)) {
plot <- plot %>%
add_trace(
x = c(data_grid$x[i], data_grid$x[i]),
y = c(data_grid$y[i], data_grid$y[i]),
z = c(0, data_grid$z[i]),
type = 'scatter3d',
mode = 'lines',
line = list(color = 'blue', width = 10)
)
}
plot
library(plotly)
# Assuming data_grid is your data frame
# Create a 3D scatter plot with markers sized to represent bar volume
plot <- plot_ly(data_grid, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers',
marker = list(size = ~z*40, color = ~z, colorscale = 'Viridis', symbol = 'square'))
plot
library(plotly)
# Assuming data_grid is your data frame
# Initialize the 3D plot
plot <- plot_ly(data_grid, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers')
# Add bars
plot <- plot_ly(data_grid, x = ~x, y = ~y, z = ~z) %>%
add_bars(
x = ~x, y = ~y, z = ~z,
marker = list(color = 'blue'),
orientation = 'z'
)
# Set the layout for 3D visualization
plot <- plot %>% layout(scene = list(
xaxis = list(title = 'X-axis'),
yaxis = list(title = 'Y-axis'),
zaxis = list(title = 'Z-axis')
))
plot
library(plot3D)
# Assuming data_grid is your data frame
# Convert x and y to factors and create a table for z
data_grid$x_f <- factor(data_grid$x)
data_grid$y_f <- factor(data_grid$y)
z_table <- table(data_grid$x_f, data_grid$y_f)
# Plot as a 3D histogram
hist3D(z = as.matrix(z_table), border = "black")
hist3D(z = as.matrix(z_table), border = "black")
install.packages("rayshader")
knitr::opts_chunk$set(eval = T, echo = T)
plot_cities <- grid.arrange(p_y, NULL, p_main, p_x, ncol = 2, nrow = 2, widths = c(4, 1), heights = c(1, 4))
plot_gg(plot_cities,multicore=TRUE,width=5,height=3,scale=310)
library(rayshader)
plot_gg(plot_cities,multicore=TRUE,width=5,height=3,scale=310)
plot_gg(plot_cities,multicore=TRUE,width=5,height=3,scale=310)
render_snapshot(filename = "3D_spain")
plot_gg(plot_cities,multicore=TRUE,width=5,height=3,scale=310)
# Example of creating a ggplot object
plot_cities <- ggplot(data = your_data_frame, aes(x = your_x_variable, y = your_y_variable)) +
geom_point() # or any other geom_* function relevant to your plot
xaringan:::inf_mr()
55/(47+55)
xaringan:::inf_mr()
xaringan:::inf_mr()
